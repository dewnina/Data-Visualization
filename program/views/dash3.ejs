<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v1.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #FAF8F1;
        }

        h2 {
            padding: 0;
            margin: 0;
            margin-left: -1em;
            text-align: center;
            margin-top: 0.5em;
        }

        #tooltip {
            position: absolute;
            width: auto;
            height: auto;
            padding: 5px;
            background-color: white;
            -webkit-border-radius: 3;
            -moz-border-radius: 3;
            border-radius: 3;
            -webkit-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            -moz-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            pointer-events: none;
        }

        #tooltip.hidden {
            display: none;
        }

        #tooltip p {
            margin: 0;
            font-family: sans-serif;
            font-size: 16px;
            line-height: 16px;
        }



        #plot3 {
            padding-left: 4.5em;
            padding-top: 1.5em;
        }
    </style>
</head>

<body>
    <div class="row">
        <div class="col-8">
            <div id="plot3"></div>
            <div id="plot1"></div>
        </div>
        <div class="col-4" id="plot2">
            <h2>Special Solid Waste</h2>
        </div>
    </div>

    <div id="tooltip" class="hidden">
        <p><span id="value"> </span></p>
    </div>

    <script>

        var width2 = 800;
        var height2 = 340;
        var padding2 = 50;
        var piedata;

        const svg = d3.select('body').select("#plot1")
            .append('svg')
            .attr('width', width2)
            .attr('height', height2);

        var width = 400;
        var height = 500;
        var padding = 50;

        const svg2 = d3.select('body')
            .select('#plot2')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        var width3 = 800;
        var height3 = 250;

        const svg3 = d3.select("body").select("#plot3")
            .append("svg")
            .attr("width", width3)
            .attr("height", height3)

        const projection = d3.geoMercator().scale(80).translate([width2 / 2, height2 / 1.4]);
        const path = d3.geoPath(projection)

        const g = svg.append('g');


        d3.json('https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/countries-110m.json').then(data => {
            const countries = topojson.feature(data, data.objects.countries);
            d3.csv('/data3.csv').then(csvData => {

                csvData.forEach(d => {
                    d.special_waste_agricultural_waste_tons_year = +d.special_waste_agricultural_waste_tons_year / 1000000
                    d.special_waste_construction_and_demolition_waste_tons_year = +d.special_waste_construction_and_demolition_waste_tons_year / 1000000
                    d.special_waste_e_waste_tons_year = +d.special_waste_e_waste_tons_year / 1000000
                    d.special_waste_hazardous_waste_tons_year = +d.special_waste_hazardous_waste_tons_year / 1000000
                    d.special_waste_industrial_waste_tons_year = +d.special_waste_industrial_waste_tons_year / 1000000
                    d.special_waste_medical_waste_tons_year = +d.special_waste_medical_waste_tons_year / 1000000
                });

                var geos = g.selectAll('path')
                    .data(countries.features)
                    .enter()
                    .append('path')
                    .attr('class', 'country')
                    .attr('d', path)
                    .style("fill", "#C3685D")
                    .style("stroke", "#E8F3D6");

                geos.on("mouseover", function (d) {
                    var countryName = d.properties.name
                    d3.select(this)
                        .transition()
                        .duration(150)
                        .style("fill", "#3B202B")

                    var xPosition = 250;
                    var yPosition = 250;

                    d3.select("#tooltip")
                        .style("left", (d3.event.pageX) + "px")
                        .style("top", (d3.event.pageY - 30) + "px")
                        .select("#value")
                        .text(d.properties.name)

                    d3.select("#tooltip").classed("hidden", false)

                    function svg2update() {
                        var cname = d.properties.name;
                        var newidx = 0
                        csvData.forEach((c, i) => {
                            if (c.country_name == cname) {
                                newidx = i
                            }
                        })
                        updatePie(newidx)
                    }
                    svg2update()

                    function svg3update() {
                        var cname = d.properties.name;
                        var newidx = 0
                        csvData.forEach((c, i) => {
                            if (c.country_name == cname) {
                                newidx = i
                            }
                        })
                        updateBar(newidx)
                    }
                    svg3update()

                });

                geos.on("mouseout", function (d) {
                    d3.select(this)
                        .transition()
                        .duration(300)
                        .style("fill", "#C3685D");

                    d3.select("#tooltip").classed("hidden", true)

                });

                function updatePieData(index) {
                    var piedata = [
                        {
                            name: 'Agricultural Waste',
                            percent: Math.round(csvData[index].special_waste_agricultural_waste_tons_year),
                        },
                        {
                            name: 'Construction & Demolition',
                            percent: Math.round(csvData[index].special_waste_construction_and_demolition_waste_tons_year),
                        },
                        {
                            name: 'e-waste',
                            percent: Math.round(csvData[index].special_waste_e_waste_tons_year),
                        },
                        {
                            name: 'Hazardous waste',
                            percent: Math.round(csvData[index].special_waste_hazardous_waste_tons_year),
                        },
                        {
                            name: 'Industrial waste',
                            percent: Math.round(csvData[index].special_waste_industrial_waste_tons_year),
                        },
                        {
                            name: 'Medical waste',
                            percent: Math.round(csvData[index].special_waste_medical_waste_tons_year),
                        }
                    ]

                    return piedata;
                }


                piedata = d3.pie().sort(null)
                    .value(d => d.percent)(updatePieData(89));

                var radius = 120;
                var donutradius = 80;

                var segment = d3.arc()
                    .innerRadius(donutradius)
                    .outerRadius(radius)
                    .padAngle(0.05)
                    .padRadius(20);

                var color = d3.scaleOrdinal().range(["#312636", "#55384C", "#7E495E", "#A85B6B", "#D26F72", "#F88874"]);

                var sections = svg2.append('g')
                    .attr("transform", "translate(" + width / 2 + "," + height / 3.5 + ")")
                    .selectAll("path")
                    .data(piedata)
                    .enter()
                    .append("path")
                    .attr("d", segment)
                    .attr("fill", d => {
                        return color(d.data.percent)
                    });

                var legends = svg2.append('g')
                    .attr("transform", "translate(" + padding + ", " + (height / 4 + radius + padding) + ")")
                    .selectAll(".legend")
                    .data(piedata)

                var legend = legends.enter()
                    .append('g')
                    .attr("class", "legend")
                    .attr("transform", (d, i) => {
                        return "translate(0, " + (i + 1) * 20 + ")"
                    })

                legend.append('rect')
                    .attr("width", 20)
                    .attr("height", 20)
                    .attr("fill", d => color(d.data.percent));

                legend.append("text").text(d => d.data.name)
                    .attr("x", 30)
                    .attr("y", 20)
                    .attr("fill", "#333")


                function updatePie(index) {
                    svg2.selectAll("*").remove();

                    piedata = d3.pie().sort(null)
                        .value(d => d.percent)(updatePieData(index));

                    var radius = 120;
                    var donutradius = 80;

                    var segment = d3.arc()
                        .innerRadius(donutradius)
                        .outerRadius(radius)
                        .padAngle(0.05)
                        .padRadius(20);

                    var color = d3.scaleOrdinal().range(["#312636", "#55384C", "#7E495E", "#A85B6B", "#D26F72", "#F88874"]);

                    var sections = svg2.append('g')
                        .attr("transform", "translate(" + width / 2 + "," + height / 3.5 + ")")
                        .selectAll("path")
                        .data(piedata)
                        .enter()
                        .append("path")
                        .attr("d", segment)
                        .attr("fill", d => {
                            return color(d.data.percent)
                        });

                    var legends = svg2.append('g')
                        .attr("transform", "translate(" + padding + ", " + (height / 4 + radius + padding) + ")")
                        .selectAll(".legend")
                        .data(piedata)

                    var legend = legends.enter()
                        .append('g')
                        .attr("class", "legend")
                        .attr("transform", (d, i) => {
                            return "translate(0, " + (i + 1) * 20 + ")"
                        })

                    legend.append('rect')
                        .attr("width", 20)
                        .attr("height", 20)
                        .attr("fill", d => color(d.data.percent));

                    legend.append("text").text(d => d.data.name)
                        .attr("x", 30)
                        .attr("y", 20)
                        .attr("fill", "#333")
                }

                // Plot 3

                function getGroupedData(index) {
                    var len = csvData.length
                    let f1 = 0
                    for (let i = 0; i < len; i++) {
                        f1 += csvData[i].special_waste_agricultural_waste_tons_year
                    }
                    let f2 = 0
                    for (let i = 0; i < len; i++) {
                        f2 += csvData[i].special_waste_construction_and_demolition_waste_tons_year
                    }
                    let f3 = 0
                    for (let i = 0; i < len; i++) {
                        f3 += csvData[i].special_waste_e_waste_tons_year
                    }
                    let f4 = 0
                    for (let i = 0; i < len; i++) {
                        f4 += csvData[i].special_waste_hazardous_waste_tons_year
                    }
                    let f5 = 0
                    for (let i = 0; i < len; i++) {
                        f5 += csvData[i].special_waste_industrial_waste_tons_year
                    }
                    let f6 = 0
                    for (let i = 0; i < len; i++) {
                        f6 += csvData[i].special_waste_medical_waste_tons_year
                    }

                    var models = [
                        {
                            group: "Average",
                            Agricultural_Waste: f1 / len,
                            Construction_Demolition: f2 / len,
                            e_waste: f3 / len,
                            Hazardous_waste: f4 / len,
                            Industrial_waste: f5 / len,
                            Medical_waste: f6 / len
                        },
                        {
                            group: "Current",
                            Agricultural_Waste: csvData[index].special_waste_agricultural_waste_tons_year,
                            Construction_Demolition: csvData[index].special_waste_construction_and_demolition_waste_tons_year,
                            e_waste: csvData[index].special_waste_e_waste_tons_year,
                            Hazardous_waste: csvData[index].special_waste_hazardous_waste_tons_year,
                            Industrial_waste: csvData[index].special_waste_industrial_waste_tons_year,
                            Medical_waste: csvData[index].special_waste_medical_waste_tons_year
                        }
                    ];
                    return models;
                }

                var models = getGroupedData(93);

                var margin = {
                    left: 220,
                    right: 50,
                    top: 30,
                    bottom: 40
                }

                var keys = ["Agricultural_Waste", "Construction_Demolition", "e_waste", "Hazardous_waste", "Industrial_waste", "Medical_waste"];
                var barname = ["Average", "Current"]

                var innerWidth = width3 - margin.left - margin.right
                var innerHeight = height3 - margin.top - margin.bottom

                var xScale = d3.scaleLinear()
                    .domain([0, 120])
                    .rangeRound([innerWidth, 0])

                var yScale = d3.scaleBand()
                    .domain(barname)
                    .paddingInner(0.3)
                    .align(.2)
                    .rangeRound([0, innerHeight])


                var stacks = d3.stack()
                    .keys(keys);

                var dataStacked = stacks(models);
                console.log(dataStacked);

                var colors = d3
                    .scaleOrdinal()
                    .range(["#2F2737", "#3B4C61", "#367585", "#31A19B", "#54CDA0", "#98F697"])

                colors.domain(keys);


                svg3.selectAll("g")
                    .data(dataStacked)
                    .enter().append("g")
                    .attr("class", "group")
                    .attr("fill", function (d) { return colors(d.key); })
                    .selectAll("rect")
                    .data(function (d) { return d; })
                    .enter().append("rect")
                    .attr("x", function (d) { return xScale(d[1]) })
                    .attr("y", function (d) { return yScale(d.data.group) })
                    .attr("transform", "translate(" + (margin.left) + ",0)")
                    .attr("width", function (d) { console.log(d); return xScale(d[0]) - xScale(d[1]) })
                    .attr("height", yScale.bandwidth())

                var axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };
                var xAxis = d3.axisBottom(xScale).tickSizeOuter(axisTicks.outerSize);
                var yAxis = d3.axisRight(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                svg3.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(${margin.left},${height3 - margin.top - margin.bottom})`)
                    .call(xAxis);

                // Add the Y Axis
                svg3.append("g")
                    .attr("class", "y axis")
                    .attr("transform", "translate(" + (width3 - margin.right) + ",0)")
                    .call(yAxis);

                svg3.append("text")
                    .attr("transform", "translate(" + (width3 / 2) + ", " + (height3 / 1.2) + ")")
                    .attr("dy", "1em")
                    .style("font-size", "1.2em")
                    .style("text-anchor", "middle")
                    .style("font-family", "sans-serif")
                    .text("Special Solid Waste (million tons)");


                var legends = svg3.append('g')
                    .attr("transform", "translate(" + 0 + ", " + height3 / 8 + ")")
                    .selectAll(".legend")
                    .data(dataStacked)

                var legend = legends.enter()
                    .append('g')
                    .attr("class", "legend")
                    .attr("transform", (d, i) => {
                        return "translate(0, " + (i + 1) * 20 + ")"
                    })

                legend.append('rect')
                    .attr("width", 20)
                    .attr("height", 20)
                    .attr("fill", d => (colors(d.key)));

                legend.append("text").text(d => d.key)
                    .attr("x", 30)
                    .attr("y", 20)
                    .attr("fill", "#333")

                function updateBar(idx) {
                    svg3.selectAll("*").remove();
                    var models = getGroupedData(idx);

                    var margin = {
                        left: 220,
                        right: 50,
                        top: 30,
                        bottom: 40
                    }

                    var keys = ["Agricultural_Waste", "Construction_Demolition", "e_waste", "Hazardous_waste", "Industrial_waste", "Medical_waste"];
                    var barname = ["Average", "Current"]

                    var innerWidth = width3 - margin.left - margin.right
                    var innerHeight = height3 - margin.top - margin.bottom


                    var stacks = d3.stack()
                        .keys(keys);

                    var dataStacked = stacks(models);
                    console.log(dataStacked);

                    var colors = d3
                        .scaleOrdinal()
                        .range(["#2F2737", "#3B4C61", "#367585", "#31A19B", "#54CDA0", "#98F697"])
                    colors.domain(keys);

                    var xdomain = Math.max(dataStacked[5][0][1], dataStacked[5][1][1])
                    console.log(xdomain);
                    var xScale = d3.scaleLinear()
                        .domain([0, xdomain])
                        .rangeRound([innerWidth, 0])

                    var yScale = d3.scaleBand()
                        .domain(barname)
                        .paddingInner(0.3)
                        .align(.2)
                        .rangeRound([0, innerHeight])


                    svg3.selectAll("g")
                        .data(dataStacked)
                        .enter().append("g")
                        .attr("class", "group")
                        .attr("fill", function (d) { return colors(d.key); })
                        .selectAll("rect")
                        .data(function (d) { return d; })
                        .enter().append("rect")
                        .attr("x", function (d) { return xScale(d[1]) })
                        .attr("y", function (d) { return yScale(d.data.group) })
                        .attr("transform", "translate(" + (margin.left) + ",0)")
                        .attr("width", function (d) { console.log(d); return xScale(d[0]) - xScale(d[1]) })
                        .attr("height", yScale.bandwidth())

                    var axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };
                    var xAxis = d3.axisBottom(xScale).tickSizeOuter(axisTicks.outerSize);
                    var yAxis = d3.axisRight(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                    svg3.append("g")
                        .attr("class", "x axis")
                        .attr("transform", `translate(${margin.left},${height3 - margin.top - margin.bottom})`)
                        .call(xAxis);

                    // Add the Y Axis
                    svg3.append("g")
                        .attr("class", "y axis")
                        .attr("transform", "translate(" + (width3 - margin.right) + ",0)")
                        .call(yAxis);

                    svg3.append("text")
                        .attr("transform", "translate(" + (width3 / 2) + ", " + (height3 / 1.2) + ")")
                        .attr("dy", "1em")
                        .style("font-size", "1.2em")
                        .style("text-anchor", "middle")
                        .style("font-family", "sans-serif")
                        .text("Special Solid Waste (million tons)");


                    var legends = svg3.append('g')
                        .attr("transform", "translate(" + 0 + ", " + height3 / 8 + ")")
                        .selectAll(".legend")
                        .data(dataStacked)

                    var legend = legends.enter()
                        .append('g')
                        .attr("class", "legend")
                        .attr("transform", (d, i) => {
                            return "translate(0, " + (i + 1) * 20 + ")"
                        })

                    legend.append('rect')
                        .attr("width", 20)
                        .attr("height", 20)
                        .attr("fill", d => (colors(d.key)));

                    legend.append("text").text(d => d.key)
                        .attr("x", 30)
                        .attr("y", 20)
                        .attr("fill", "#333")
                }

            });
        });



    </script>

</body>

</html>