<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v1.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #DFFFD8;
        }

        h2 {
            padding: 0;
            margin: 0;
            text-align: center;
            margin-top: 0.5em;
        }

        #tooltip {
            position: absolute;
            width: auto;
            height: auto;
            padding: 5px;
            background-color: white;
            -webkit-border-radius: 3;
            -moz-border-radius: 3;
            border-radius: 3;
            -webkit-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            -moz-box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
            pointer-events: none;
        }

        #tooltip.hidden {
            display: none;
        }

        #tooltip p {
            margin: 0;
            font-family: sans-serif;
            font-size: 16px;
            line-height: 16px;
        }

        #plot2,
        #plot3 {
            height: 50%;
        }
    </style>
</head>

<body>
    <div class="row">
        <div class="col-4" id="plot1">
            <h2>Types of Solid Waste</h2>
        </div>
        <div class="col-8">
            <div id="plot2"></div>
            <div id="plot3"></div>
        </div>
    </div>

    <div id="tooltip" class="hidden">
        <p><span id="value"> </span></p>
    </div>

    <script>
        var width = 450;
        var height = 600;
        var padding = 50;

        const svg2 = d3.select('body')
            .select('#plot1')
            .append('svg')
            .attr('width', width)
            .attr('height', height);

        var width2 = 800;
        var height2 = 350;
        var padding2 = 50;
        var piedata;



        const svg = d3.select('body').select("#plot2")
            .append('svg')
            .attr('width', width2)
            .attr('height', height2);

        var width3 = 800;
        var height3 = 300;

        const svg3 = d3.select("body").select("#plot3")
            .append("svg")
            .attr("width", width3)
            .attr("height", height3)

        const projection = d3.geoMercator().scale(80).translate([width2 / 2, height2 / 1.4]);
        const path = d3.geoPath(projection)

        const g = svg.append('g');


        d3.json('https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/countries-110m.json').then(data => {
            const countries = topojson.feature(data, data.objects.countries);
            d3.csv('/data2.csv').then(csvData => {

                csvData.forEach(d => {
                    d.composition_food_organic_waste_percent = +d.composition_food_organic_waste_percent
                    d.composition_glass_percent = +d.composition_glass_percent
                    d.composition_metal_percent = +d.composition_metal_percent
                    d.composition_other_percent = +d.composition_other_percent
                    d.composition_paper_cardboard_percent = +d.composition_paper_cardboard_percent
                    d.composition_plastic_percent = +d.composition_plastic_percent
                    d.composition_rubber_leather_percent = +d.composition_rubber_leather_percent
                    d.composition_wood_percent = +d.composition_wood_percent
                    d.composition_yard_garden_green_waste_percent = +d.composition_yard_garden_green_waste_percent
                });

                var geos = g.selectAll('path')
                    .data(countries.features)
                    .enter()
                    .append('path')
                    .attr('class', 'country')
                    .attr('d', path)
                    .style("fill", "#98DFD6")
                    .style("stroke", "#333");

                geos.on("mouseover", function (d) {
                    var countryName = d.properties.name
                    d3.select(this)
                        .transition()
                        .duration(150)
                        .style("fill", "orange")

                    var xPosition = 250;
                    var yPosition = 250;

                    d3.select("#tooltip")
                        .style("left", (d3.event.pageX) + "px")
                        .style("top", (d3.event.pageY - 30) + "px")
                        .select("#value")
                        .text(d.properties.name)

                    d3.select("#tooltip").classed("hidden", false)

                    function svg2update() {
                        var cname = d.properties.name;
                        var newidx = 0
                        csvData.forEach((c, i) => {
                            if (c.country_name == cname) {
                                newidx = i
                            }
                        })
                        updatePie(newidx)
                    }
                    svg2update()

                    function svg3update() {
                        var cname = d.properties.name;
                        var newidx = 0
                        csvData.forEach((c, i) => {
                            if (c.country_name == cname) {
                                newidx = i
                            }
                        })
                        updateBar(newidx)
                    }
                    svg3update()

                });

                geos.on("mouseout", function (d) {
                    d3.select(this)
                        .transition()
                        .duration(300)
                        .style("fill", "#98DFD6");

                    d3.select("#tooltip").classed("hidden", true)

                });

                function updatePieData(index) {
                    var piedata = [
                        {
                            name: 'Organic Food',
                            percent: Math.round(csvData[index].composition_food_organic_waste_percent),
                        },
                        {
                            name: 'Glass',
                            percent: Math.round(csvData[index].composition_glass_percent),
                        },
                        {
                            name: 'Metal',
                            percent: Math.round(csvData[index].composition_metal_percent),
                        },
                        {
                            name: 'Other',
                            percent: Math.round(csvData[index].composition_other_percent),
                        },
                        {
                            name: 'Paper Cardboard',
                            percent: Math.round(csvData[index].composition_paper_cardboard_percent),
                        },
                        {
                            name: 'Plastic',
                            percent: Math.round(csvData[index].composition_plastic_percent),
                        },
                        {
                            name: 'Rubber Leather',
                            percent: Math.round(csvData[index].composition_rubber_leather_percent),
                        },
                        {
                            name: 'Wood',
                            percent: Math.round(csvData[index].composition_wood_percent),
                        },
                        {
                            name: 'Yard Garden Green Waste',
                            percent: Math.round(csvData[index].composition_yard_garden_green_waste_percent)
                        }
                    ]

                    return piedata;
                }


                piedata = d3.pie().sort(null)
                    .value(d => d.percent)(updatePieData(3));

                var radius = 120;

                var segment = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius)
                    .padAngle(0.05)
                    .padRadius(20);

                var color = d3.scaleOrdinal(d3.schemeAccent);

                var sections = svg2.append('g')
                    .attr("transform", "translate(" + width / 2 + "," + height / 3.5 + ")")
                    .selectAll("path")
                    .data(piedata)
                    .enter()
                    .append("path")
                    .attr("d", segment)
                    .attr("fill", d => {
                        return color(d.data.percent)
                    });

                var content = svg2.selectAll(".label-text")
                    .data(piedata)
                    .enter()
                    .append("text")
                    .attr("class", "label-text")
                    .attr("transform", "translate(" + (width / 2) + "," + (height / 3.5) + ")")
                    .attr("x", d => {
                        return segment.centroid(d)[0]
                    })
                    .attr("y", d => {
                        return segment.centroid(d)[1]
                    })
                    .text(d => {
                        if (d.data.percent != 0) return d.data.percent
                    }
                    )
                    .style('fill', '#333')
                    .style('font-weight', 'bolder')
                    .style('font-size', 12)

                var legends = svg2.append('g')
                    .attr("transform", "translate(" + padding + ", " + (height / 4 + radius + padding) + ")")
                    .selectAll(".legend")
                    .data(piedata)

                var legend = legends.enter()
                    .append('g')
                    .attr("class", "legend")
                    .attr("transform", (d, i) => {
                        return "translate(0, " + (i + 1) * 20 + ")"
                    })

                legend.append('rect')
                    .attr("width", 20)
                    .attr("height", 20)
                    .attr("fill", d => color(d.data.percent));

                legend.append("text").text(d => d.data.name)
                    .attr("x", 30)
                    .attr("y", 20)
                    .attr("fill", "#333")


                function updatePie(index) {
                    svg2.selectAll("*").remove();

                    piedata = d3.pie().sort(null)
                        .value(d => d.percent)(updatePieData(index));

                    var radius = 120;

                    var segment = d3.arc()
                        .innerRadius(0)
                        .outerRadius(radius)
                        .padAngle(0.05)
                        .padRadius(20);

                    var color = d3.scaleOrdinal(d3.schemeAccent);

                    var sections = svg2.append('g')
                        .attr("transform", "translate(" + width / 2 + "," + height / 3.5 + ")")
                        .selectAll("path")
                        .data(piedata)
                        .enter()
                        .append("path")
                        .attr("d", segment)
                        .attr("fill", d => {
                            return color(d.data.percent)
                        });

                    var content = svg2.selectAll(".label-text")
                        .data(piedata)
                        .enter()
                        .append("text")
                        .attr("class", "label-text")
                        .attr("transform", "translate(" + (width / 2) + "," + (height / 3.5) + ")")
                        .attr("x", d => {
                            return segment.centroid(d)[0]
                        })
                        .attr("y", d => {
                            return segment.centroid(d)[1]
                        })
                        .text(d => {
                            if (d.data.percent != 0) return d.data.percent
                        }
                        )
                        .style('fill', '#333')
                        .style('font-weight', 'bolder')
                        .style('font-size', 12)

                    var legends = svg2.append('g')
                        .attr("transform", "translate(" + padding + ", " + (height / 4 + radius + padding) + ")")
                        .selectAll(".legend")
                        .data(piedata)

                    var legend = legends.enter()
                        .append('g')
                        .attr("class", "legend")
                        .attr("transform", (d, i) => {
                            return "translate(0, " + (i + 1) * 20 + ")"
                        })

                    legend.append('rect')
                        .attr("width", 20)
                        .attr("height", 20)
                        .attr("fill", d => color(d.data.percent));

                    legend.append("text").text(d => d.data.name)
                        .attr("x", 30)
                        .attr("y", 20)
                        .attr("fill", "#333")
                }

                function getGroupedData(index) {
                    var len = csvData.length
                    let f1 = 0
                    for (let i = 0; i < len; i++) {
                        f1 += csvData[i].composition_food_organic_waste_percent
                    }
                    let f2 = 0
                    for (let i = 0; i < len; i++) {
                        f2 += csvData[i].composition_glass_percent
                    }
                    let f3 = 0
                    for (let i = 0; i < len; i++) {
                        f3 += csvData[i].composition_metal_percent
                    }
                    let f4 = 0
                    for (let i = 0; i < len; i++) {
                        f4 += csvData[i].composition_other_percent
                    }
                    let f5 = 0
                    for (let i = 0; i < len; i++) {
                        f5 += csvData[i].composition_paper_cardboard_percent
                    }
                    let f6 = 0
                    for (let i = 0; i < len; i++) {
                        f6 += csvData[i].composition_plastic_percent
                    }
                    let f7 = 0
                    for (let i = 0; i < len; i++) {
                        f7 += csvData[i].composition_rubber_leather_percent
                    }
                    let f8 = 0
                    for (let i = 0; i < len; i++) {
                        f8 += csvData[i].composition_wood_percent
                    }
                    let f9 = 0
                    for (let i = 0; i < len; i++) {
                        f9 += csvData[i].composition_yard_garden_green_waste_percent
                    }
                    var models = [
                        {
                            model_name: 'Organic Food',
                            field1: f1 / len,
                            field2: Math.round(csvData[index].composition_food_organic_waste_percent)
                        },
                        {
                            model_name: 'Glass',
                            field1: f2 / len,
                            field2: Math.round(csvData[index].composition_glass_percent)
                        },
                        {
                            model_name: 'Metal',
                            field1: f3 / len,
                            field2: Math.round(csvData[index].composition_metal_percent)
                        },
                        {
                            model_name: 'Other',
                            field1: f4 / len,
                            field2: Math.round(csvData[index].composition_other_percent)
                        },
                        {
                            model_name: 'Paper & Cardboard',
                            field1: f5 / len,
                            field2: Math.round(csvData[index].composition_paper_cardboard_percent)
                        },
                        {
                            model_name: 'Plastic',
                            field1: f6 / len,
                            field2: Math.round(csvData[index].composition_plastic_percent)
                        },
                        {
                            model_name: 'Rubber & Leather',
                            field1: f7 / len,
                            field2: Math.round(csvData[index].composition_rubber_leather_percent)
                        },
                        {
                            model_name: 'Wood',
                            field1: f8 / len,
                            field2: Math.round(csvData[index].composition_wood_percent)
                        },
                        {
                            model_name: 'Yard Green',
                            field1: f9 / len,
                            field2: Math.round(csvData[index].composition_yard_garden_green_waste_percent)
                        },
                    ];
                    return models;
                }

                var models = getGroupedData(3);


                var margin = { top: 30, right: 20, bottom: 30, left: 50 }
                var barPadding = .2
                var axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                svg3.append("g")
                    .attr("transform", `translate(${margin.left},${margin.top})`);

                var xScale0 = d3.scaleBand().range([0, width3 - margin.left - margin.right]).padding(barPadding);
                var xScale1 = d3.scaleBand();
                var yScale = d3.scaleLinear().range([height3 - margin.top - margin.bottom, 0]);

                var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                xScale0.domain(models.map(d => d.model_name));
                xScale1.domain(['field1', 'field2']).range([0, xScale0.bandwidth()]);
                yScale.domain([0, d3.max(models, d => d.field1 > d.field2 ? d.field1 : d.field2) + 5]);

                var model_name = svg3.selectAll(".model_name")
                    .data(models)
                    .enter().append("g")
                    .attr("class", "model_name")
                    .attr("transform", d => `translate(${xScale0(d.model_name)},0)`);


                model_name.selectAll(".bar.field1")
                    .data(d => [d])
                    .enter()
                    .append("rect")
                    .attr("class", "bar field1")
                    .style("fill", "steelblue")
                    .attr("x", d => xScale1('field1'))
                    .attr("y", d => yScale(d.field1))
                    .attr("width", xScale1.bandwidth())
                    .attr("transform", "translate(" + (padding + margin.left - 10) + ",0)")
                    .attr("height", d => {
                        return height3 - margin.top - margin.bottom - yScale(d.field1)
                    });

                model_name.selectAll(".bar.field2")
                    .data(d => [d])
                    .enter()
                    .append("rect")
                    .attr("class", "bar field2")
                    .style("fill", "green")
                    .attr("x", d => xScale1('field2'))
                    .attr("y", d => yScale(d.field2))
                    .attr("width", xScale1.bandwidth())
                    .attr("transform", "translate(" + (padding + margin.left - 10) + ",0)")
                    .attr("height", d => {
                        return height3 - margin.top - margin.bottom - yScale(d.field2)
                    });

                svg3.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(${padding + margin.left - 10},${height3 - margin.top - margin.bottom})`)
                    .call(xAxis);

                // Add the Y Axis
                svg3.append("g")
                    .attr("class", "y axis")
                    .attr("transform", "translate(" + (padding + margin.left + 5) + ",0)")
                    .call(yAxis);

                svg3.append("text")
                    .attr("transform", "translate(" + (padding) + ", " + (height2 / 3) + ") rotate(-90)")
                    .attr("dy", "1em")
                    .style("font-size", "1.2em")
                    .style("text-anchor", "middle")
                    .style("font-family", "sans-serif")
                    .text("Percentage of Solid Waste");

                var legenddata = [{ name: "Average of All Counties", color: "steelblue" },
                { name: "Selected Country", color: "green" }]

                var legends = svg3.append('g')
                    .attr("transform", "translate(" + (width3 / 1.5) + ", " + 0 + ")")
                    .selectAll(".legend")
                    .data(legenddata)

                var legend = legends.enter()
                    .append('g')
                    .attr("class", "legend")
                    .attr("transform", (d, i) => {
                        return "translate(0, " + (i + 1) * 20 + ")"
                    })

                legend.append('rect')
                    .attr("width", 20)
                    .attr("height", 20)
                    .attr("fill", d => (d.color));

                legend.append("text").text(d => d.name)
                    .attr("x", 30)
                    .attr("y", 20)
                    .attr("fill", "#333")


                function updateBar(index) {
                    svg3.selectAll("*").remove();
                    var models = getGroupedData(index);


                    var margin = { top: 30, right: 20, bottom: 30, left: 50 }
                    var barPadding = .2
                    var axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                    svg3.append("g")
                        .attr("transform", `translate(${margin.left},${margin.top})`);

                    var xScale0 = d3.scaleBand().range([0, width3 - margin.left - margin.right]).padding(barPadding);
                    var xScale1 = d3.scaleBand();
                    var yScale = d3.scaleLinear().range([height3 - margin.top - margin.bottom, 0]);

                    var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                    var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                    xScale0.domain(models.map(d => d.model_name));
                    xScale1.domain(['field1', 'field2']).range([0, xScale0.bandwidth()]);
                    yScale.domain([0, d3.max(models, d => d.field1 > d.field2 ? d.field1 : d.field2) + 5]);

                    var model_name = svg3.selectAll(".model_name")
                        .data(models)
                        .enter().append("g")
                        .attr("class", "model_name")
                        .attr("transform", d => `translate(${xScale0(d.model_name)},0)`);


                    model_name.selectAll(".bar.field1")
                        .data(d => [d])
                        .enter()
                        .append("rect")
                        .attr("class", "bar field1")
                        .style("fill", "steelblue")
                        .attr("x", d => xScale1('field1'))
                        .attr("y", d => yScale(d.field1))
                        .attr("width", xScale1.bandwidth())
                        .attr("transform", "translate(" + (padding + margin.left - 10) + ",0)")
                        .attr("height", d => {
                            return height3 - margin.top - margin.bottom - yScale(d.field1)
                        });

                    model_name.selectAll(".bar.field2")
                        .data(d => [d])
                        .enter()
                        .append("rect")
                        .attr("class", "bar field2")
                        .style("fill", "green")
                        .attr("x", d => xScale1('field2'))
                        .attr("y", d => yScale(d.field2))
                        .attr("width", xScale1.bandwidth())
                        .attr("transform", "translate(" + (padding + margin.left - 10) + ",0)")
                        .attr("height", d => {
                            return height3 - margin.top - margin.bottom - yScale(d.field2)
                        });

                    svg3.append("g")
                        .attr("class", "x axis")
                        .attr("transform", `translate(${padding + margin.left - 10},${height3 - margin.top - margin.bottom})`)
                        .call(xAxis);

                    // Add the Y Axis
                    svg3.append("g")
                        .attr("class", "y axis")
                        .attr("transform", "translate(" + (padding + margin.left + 5) + ",0)")
                        .call(yAxis);

                    svg3.append("text")
                        .attr("transform", "translate(" + (padding) + ", " + (height2 / 3) + ") rotate(-90)")
                        .attr("dy", "1em")
                        .style("font-size", "1.2em")
                        .style("text-anchor", "middle")
                        .style("font-family", "sans-serif")
                        .text("Percentage of Solid Waste");

                    var legenddata = [{ name: "Average of All Counties", color: "steelblue" },
                    { name: "Selected Country", color: "green" }]

                    var legends = svg3.append('g')
                        .attr("transform", "translate(" + (width3 / 1.5) + ", " + 0 + ")")
                        .selectAll(".legend")
                        .data(legenddata)

                    var legend = legends.enter()
                        .append('g')
                        .attr("class", "legend")
                        .attr("transform", (d, i) => {
                            return "translate(0, " + (i + 1) * 20 + ")"
                        })

                    legend.append('rect')
                        .attr("width", 20)
                        .attr("height", 20)
                        .attr("fill", d => (d.color));

                    legend.append("text").text(d => d.name)
                        .attr("x", 30)
                        .attr("y", 20)
                        .attr("fill", "#333")
                }


            });
        });



    </script>

</body>

</html>